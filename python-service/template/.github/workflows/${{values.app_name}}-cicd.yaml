name: ${{values.app_name}}-cicd 

on:
  push:
    paths:
      - src/**
    branches:
      - main

permissions:
  contents: write

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      COMMIT_ID: ${{ github.sha }}
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Shorten commit SHA
        shell: bash
        run: |
          echo "COMMIT_ID=${GITHUB_SHA::6}" >> "$GITHUB_ENV"
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ '${{ vars.DOCKERHUB_USERNAME }}' }}
          password: ${{ '${{ secrets.DOCKERHUB_TOKEN }}' }}
      -
        name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: doclosjs/${{values.app_name}}:${{ '${{env.COMMIT_ID}}' }}
  cd:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v3
      -
        name: Register with releases repo
        shell: bash
        run: |
          export APP_NAME="${GITHUB_REPOSITORY##*/}"
          export APP_ENV="${{values.app_name}}"  # or derive dynamically if needed
          export RELEASE_TOKEN="${{ secrets.RELEASE_TOKEN }}
          export RELEASE_REPO="https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com/los-demos/dcipher-demo-releases.git"

          echo "APP_NAME=$APP_NAME"
          echo "APP_ENV=$APP_ENV"
          echo "RELEASE_REPO=$RELEASE_REPO"

          ./post-create.sh

      # - name: Set environment variables
      #   run: |
      #     echo "APP_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
      #     echo "APP_ENV=${{values.app_env}}" >> $GITHUB_ENV  # or infer from branch or input

      # - name: Register with releases repo
      #   shell: bash
      #   run: |
      #     export RELEASE_REPO="https://x-access-token:${{ secrets.RELEASE_TOKEN }}@github.com/los-demos/dcipher-demo-releases.git" 
      #     ./post-create.sh

  # cd:
  #   needs: ci
  #   runs-on: ubuntu-latest
  #   env:
  #     RELEASE_TOKEN: ${{secrets.RELEASE_TOKEN }}
  #     APP_NAME: ${{ values.app_name }}
  #     APP_ENV: ${{ values.app_env }}
  #   steps:
  #     -
  #       name: Checkout repository
  #       uses: actions/checkout@v3
  #     - 
  #       name: Register with releases repo
  #       shell: bash
  #       run: |
  #         export RELEASE_REPO="https://x-access-token:${RELEASE_TOKEN}@github.com/los-demos/dcipher-demo-releases.git" 
  #         ./post-create.sh

      # - 
      #   name: Run release script
      #   env:
      #     # RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      #     APP_NAME: ${{ values.app_name }}
      #     APP_ENV: ${{ values.app_env }}
      #     COMMIT_ID: ${{ github.sha }}
      #   run: |
      #     if [ -z "$RELEASE_TOKEN" ]; then
      #       echo "RELEASE_TOKEN is empty"
      #       exit 1
      #     else
      #       echo "RELEASE_TOKEN is set"
      #     fi
      #     export RELEASE_REPO="https://x-access-token:${RELEASE_TOKEN}@github.com/los-demos/dcipher-demo-releases.git"
      #     ./post-create.sh

      # -
      #   name: Debug Release token presence
      #   shell: bash
      #   run: |
      #     if [ -z "$RELEASE_TOKEN" ]; then
      #       echo "RELEASE_TOKEN is empty"
      #       exit 1
      #     else
      #       echo "RELEASE_TOKEN is set"
      #     fi
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      # -
      #   name: Register with releases
      #   shell: bash
      #   env:
      #     RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      #     APP_NAME: ${{ values.app_name }}
      #     APP_ENV: ${{ values.app_env }}
      #   run: |
      #     export RELEASE_REPO="https://x-access-token:${RELEASE_TOKEN}@github.com/los-demos/dcipher-demo-releases.git" 
      #     ./post-create.sh
  #   outputs:
  #     commit_id: ${{ '${{env.COMMIT_ID}}' }}

  # cd:
  #   needs: ci
  #   runs-on: [arc-runner-set]
  #   steps:
  #     -
  #       name: Clone the repo
  #       uses: actions/checkout@v3
  #     -
  #       name: Install Python and pip
  #       shell: bash
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y python3 python3-pip python3-venv
  #     - 
  #       name: Modify values file
  #       shell: bash
  #       run: |
  #         python3 -m pip install --user pipx
  #         export PATH="$HOME/.local/bin:$PATH"
  #         pipx install yq
  #         yq -Yi '.image.tag = "${{'${{needs.ci.outputs.commit_id}}' }}"' charts/${{values.app_name}}/values-${{values.app_env}}.yaml
  #     -
  #       name: Commit changes and push
  #       uses: EndBug/add-and-commit@v9
  #       with:
  #         message: 'Upates values.yaml file with commit: ${{ '${{needs.ci.outputs.commit_id}}' }}'
  #     -
  #       name: Download & install argocd CLI
  #       shell: bash
  #       run: |
  #         curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
  #         chmod +x argocd-linux-amd64
  #         sudo mv argocd-linux-amd64 /usr/local/bin/argocd
  #     -
  #       name: Argocd login
  #       shell: bash
  #       run: |
  #         argocd login argocd.los.com \
  #           --insecure  \
  #           --grpc-web \
  #           --username admin \
  #           --password  ${{ '${{ secrets.ARGOCD_PASSWORD }}' }}
  #     -
  #       name: Add Argocd repo and create app
  #       shell: bash
  #       run: |
  #         repo="https://github.com/los-demo/${{values.app_name}}.git"
  #         argocd repo list | grep -q $repo || argocd repo add $repo
          
  #         argocd app get ${{values.app_name}} || argocd app create ${{values.app_name}} \
  #           --repo $repo \
  #           --path charts/${{values.app_name}} \
  #           --dest-namespace ${{values.app_env}} \
  #           --dest-server https://kubernetes.default.svc \
  #           --values values-${{values.app_env}}.yaml \
  #           --revision main \
  #           --sync-policy manual \
  #           --sync-option CreateNamespace=true
  #     -
  #       name: Run Argocd app sync
  #       shell: bash
  #       run: |
  #         argocd app sync ${{values.app_name}}
  #         argocd app wait ${{values.app_name}} --timeout 180